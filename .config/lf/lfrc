# Basic Settings
set hidden true
set icons
set shellopts '-eu'
set ifs "\n"
set drawbox
set scrolloff 10 
set period 1 
set number true
set relativenumber true
set incsearch
set mouse

#set previewer stpv
#set cleaner stpvimgclr
#&stpvimg --listen $id
#cmd on-quit $stpvimg --end $id

set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

#set cleaner '~/.config/lf/cleaner'
#set previewer '~/.config/lf/scope'

# Custom Functions
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir "$ans" 
  lf -remote "send $id cd \"$ans\""
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR "$ans"
}}

cmd setwallpaper %cp "$f" ~/.config/wall.jpg && xwallpaper --zoom "$f"

cmd trash ${{
    set -f
    for x in $fx ; do
        trash $x
    done
    echo "File(s) moved to trash"
}}

cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf "$f";;
        *.tar.gz|*.tgz) tar xzvf "$f";;
        *.tar.xz|*.txz) tar xJvf "$f";;
        *.zip) unzip "$f";;
        *.rar) unrar x "$f";;
        *.7z) 7z x "$f";;
    esac
}}

#cmd open ${{
    #case $(file --mime-type "$f" -b) in
        ##application/vnd*|application/epub*) setsid -f libreoffice $fx >/dev/null 2>&1 ;;
        #application/vnd*|application/epub*) xdotool key super+2 F11; libreoffice $fx ;xdotool key super+3 ;;
        ##application/pdf|application/gzip) xdotool key super+2 && setsid -f xournalpp $fx >/dev/null 2>&1 ;;
        #application/pdf|application/gzip) xdotool key super+2 ;xdotool mousemove 31 1005; ((sleep .5;  xdotool key F11 click 1) & evince $fx  )  ; xdotool key super+3 ;;
        #text/*|application/json|inode/x-empty) $EDITOR $fx;;
        ##image/*) setsid -f sxiv "$f" >/dev/null 2>&1;;
        #image/*) xdotool key super+2; sxiv $fx ; xdotool key super+3 ;;
        #audio/*) mpv --audio-display=no $f ;;
        #video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
        #application/pgp-encrypted) $EDITOR $fx ;;
        #*) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    #esac
#}}

cmd open ${{
    #case $f in 
        #*.exe) wine $f ;;
        #*.obj) blender -P /home/mofasa/.local/bin/importInBlender.py -- $fx ;;
        #*.xopp) setsid -f xournalpp $f >/dev/null 2>&1 ;;
    case $(file --mime-type $f -b) in 
        text/*) $EDITOR $fx ;; 
        *) for f in $fx; do setsid -f $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd find_file ${{
    FILE=$(fzf)
    case $(file --mime-type $FILE -b) in 
        text/*) $EDITOR $FILE ;; 
        *) setsid -f $OPENER $FILE > /dev/null 2> /dev/null & ;;
    esac
}}

cmd git_branch ${{
    git branch | fzf | xargs git checkout
    pwd_shell=$(pwd)
    lf -remote "send $id updir"
    lf -remote "send $id cd \"$pwd_shell\""
}}

cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd download %{{
    LINK=$(xclip -o -selection clipboard)
    #[[ $LINK =~ "git" ]] && ( [[ $LINK =~ "clone" ]] && $LINK || $(git clone $LINK) ) || $(wget $LINK)
    [[ $LINK =~ "git" ]] && $(git clone $LINK) || $(wget $LINK)
}}

cmd execute %{{
    case $f in 
        #*.yaml) awk '{print $f'} | xargs kubectl apply -f ;;
        *.yaml) echo -ne "$fx" | xargs -I % kubectl apply -f % ;;
        *) $(sh $f) ;;
    esac
}}

#cmd bookmark_jump ${{
    #res="$(cat $LF_BOOKMARK_PATH/$(ls $LF_BOOKMARK_PATH | fzf))"
    #lf -remote "send $id cd \"$res\""
#}}

#cmd bookmark_create ${{
    #read ans
    #echo $PWD > $LF_BOOKMARK_PATH/$ans
#}}

# Bindings
map m
map w $$SHELL -c scroll
map o $code "$f"
map E $(sudo $EDITOR "$f")

map Z extract

# Basic Functions
map . set hidden!
#map D trash
map p paste
map x cut
map y copy
map Y $(echo "$fx" | xclip -selection clipboard)
#map <enter> open
#map l open
map <delete> trash
map R reload
map mf mkfile
map md mkdir
map C clear
map <c-c> cancel
#map D $( [[ ! -d done/ ]]&&mkdir done ; mv "$f" done/ )
map bg setwallpaper
#map gb $(gruvbox-factory -i "$f")
map A rename # at the very end
map c push A<c-u> # new rename
map I push A<c-a> # at the very beginning
map i push A<a-b><a-b><a-f> # before extention
map a push A<a-b> # after extention
map B $printf '%s\n' $fx | vidir -
map P :link
map f mark-load
map M mark-save

# Movement
#map gd cd ~/Documents
#map gD cd ~/Downloads
#map gp cd ~/Pictures
#map gm cd ~/Music
#map gc cd ~/.config/lf
#map gn cd ~/.config/nvim
#map gk cd /mnt/data/Graduation\ project
#map gl cd /mnt/data/Graduation\ project/GP-Demo/src
#map gj cd /mnt/data/4-2
#map gs cd ~/apps/Arch-Setup/dwm
#map ga cd ~/apps
#map gr cd /
#map gb cd ~/.local/bin

map ml $(sudo mount /dev/sda7 /mnt)
map ma $(jmtpfs -o allow_other ~/mnt)

map u
map ul $(sudo umount /mnt)
map ua $(fusermount -u ~/mnt)

#map t $(git clone $(xclip -o -selection clipboard))
map t download
# map gt $([[ "$(xclip -o -selection clipboard)" =~ ^git\sclone ]] && {$(xclip -o -selection clipboard)} || git clone $(xclip -o -selection clipboard))

# dragon
map x
map xr $(dragon -a -x $fx)
map xs $(dragon -a $fx)
map xm $(dragon -t -x $fx)

map X execute 

map F find_file

map br git_branch

map <m-up> up
map <m-down> down
#map <m-1> cd ..
#map <m-2> open

map <f-12> $$(npm run test)
